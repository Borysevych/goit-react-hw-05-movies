{"version":3,"file":"static/js/507.c5dd179d.chunk.js","mappings":"+SAEMA,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAClB,IAAMC,EAAiB,mCAAG,oGACRD,EAAAA,EAAAA,IAAU,sBAAuB,CACtDE,OAAQ,CACNC,QAASJ,KAHkB,cACzBK,EADyB,yBAMxBA,EAASC,MANe,2CAAH,qDASjBC,EAAa,mCAAG,WAAMC,GAAN,8EAC3BC,QAAQC,IAAI,gBAAiBF,GADF,SAEJP,EAAAA,EAAAA,IAAA,iBAAoBO,GAAM,CAC/CL,OAAQ,CACNC,QAASJ,KAJc,cAErBK,EAFqB,yBAOpBA,EAASC,MAPW,2CAAH,sDAUbK,EAAY,mCAAG,WAAMH,GAAN,8EAC1BC,QAAQC,IAAIF,GADc,SAEHP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,YAAkC,CACvDL,OAAQ,CACNC,QAASJ,KAJa,cAEpBK,EAFoB,yBAOnBA,EAASC,KAAKM,MAPK,2CAAH,sDAUZC,EAAe,mCAAG,WAAML,GAAN,8EAC7BC,QAAQC,IAAIF,GADiB,SAENP,EAAAA,EAAAA,IAAA,iBAAoBO,EAApB,YAAkC,CACvDL,OAAQ,CACNC,QAASJ,KAJgB,cAEvBK,EAFuB,yBAOtBA,EAASC,KAAKQ,SAPQ,2CAAH,sDAUfC,EAAc,mCAAG,WAAMC,GAAN,8EAC5BP,QAAQC,IAAIM,GADgB,SAELf,EAAAA,EAAAA,IAAA,gBAA2B,CAChDE,OAAQ,CACNC,QAASJ,EACTiB,MAAOD,KALiB,cAEtBX,EAFsB,yBAQrBA,EAASC,MARY,2CAAH,qD,sFCyB3B,UA/De,WAAO,IAAD,EACnB,GAAwCY,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMH,EAAK,UAAGE,EAAaE,IAAI,gBAApB,QAAgC,GAE3C,GAA2BC,EAAAA,EAAAA,UAAS,MAApC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAoCF,EAAAA,EAAAA,UAAS,MAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACA,GAAsCN,EAAAA,EAAAA,UAASL,GAA/C,eAAOY,EAAP,KAAoBC,EAApB,MAEAC,EAAAA,EAAAA,YAAU,WACM,KAAVd,IAEJO,EAAS,MACTE,EAAc,MACdE,GAAW,IAEXb,EAAAA,EAAAA,IAAeE,GACZe,MAAK,SAAA1B,GACJkB,EAASlB,EAAKQ,SACdY,EAAcpB,EAAK2B,eACnBL,GAAW,EACZ,IACAM,MAAMzB,QAAQC,KAClB,GAAE,CAACO,IAcJ,OACE,iCACE,kBAAMkB,SAVW,SAAAC,GACnBA,EAAEC,iBACF,IACMC,EADOF,EAAEG,OACctB,MAAMuB,MAAMC,cAAcC,OAEvDtB,EAAgB,CAAEH,MAAOqB,GAC1B,EAIG,WACE,kBACEK,KAAK,OACLC,KAAK,QACLJ,MAAOX,EACPgB,SAnBkB,SAAAT,GACxBN,EAAeM,EAAEU,cAAcN,MAChC,EAkBOO,YAAY,sBAGd,mBAAQJ,KAAK,SAAb,uBAGDhB,IACC,0BACE,wCAGHJ,IAAU,SAAC,IAAD,CAAYA,OAAQA,IAEf,IAAfE,IAAoB,gDAG1B,C,oDC/CD,IAlBmB,SAAC,GAAgB,IAAdF,EAAa,EAAbA,OACdyB,GAAWC,EAAAA,EAAAA,MACjB,OACE,iCACE,4CACA,wBACG1B,EAAO2B,KAAI,gBAAG1C,EAAH,EAAGA,GAAI2C,EAAP,EAAOA,MAAP,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAa5C,GAAM6C,MAAO,CAAEC,KAAMN,GAA1C,SACGG,KAFI3C,EADC,QAUnB,C","sources":["components/fetchAPI.js","components/movies/Movies.jsx","components/moviesList/MoviesList.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '2a9f3f1884aca3d0f8736b654da9b9f1';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nexport const getTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMoviesById = async id => {\n  console.log('getMoviesById', id);\n  const response = await axios.get(`/movie/${id}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n};\n\nexport const getMovieCast = async id => {\n  console.log(id);\n  const response = await axios.get(`/movie/${id}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.cast;\n};\n\nexport const getMovieReviews = async id => {\n  console.log(id);\n  const response = await axios.get(`/movie/${id}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data.results;\n};\n\nexport const getSearchQuery = async searchQuery => {\n  console.log(searchQuery);\n  const response = await axios.get(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      query: searchQuery,\n    },\n  });\n  return response.data;\n};","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { getSearchQuery } from 'components/fetchAPI';\nimport MoviesList from 'components/moviesList/MoviesList';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const [movies, setMovie] = useState(null);\n  const [totalMovie, setTotalMovie] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [inputSearch, setInputSearch] = useState(query);\n\n  useEffect(() => {\n    if (query === '') return;\n\n    setMovie(null);\n    setTotalMovie(null);\n    setLoading(true);\n\n    getSearchQuery(query)\n      .then(data => {\n        setMovie(data.results);\n        setTotalMovie(data.total_results);\n        setLoading(false);\n      })\n      .catch(console.log);\n  }, [query]);\n\n  const handleInputChange = e => {\n    setInputSearch(e.currentTarget.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const queryNormalized = form.query.value.toLowerCase().trim();\n\n    setSearchParams({ query: queryNormalized });\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          value={inputSearch}\n          onChange={handleInputChange}\n          placeholder=\"Enter movie name\"\n        />\n\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {loading && (\n        <div>\n          <p>Loading...</p>\n        </div>\n      )}\n      {movies && <MoviesList movies={movies} />}\n\n      {totalMovie === 0 && <div>Movies not found</div>}\n    </>\n  );\n};\n\nexport default Movies;","import { Link, useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      <h1>Trending Today</h1>\n      <ul>\n        {movies.map(({ id, title }) => (\n          <li key={id}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              {title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default MoviesList;"],"names":["API_KEY","axios","getTrendingMovies","params","api_key","response","data","getMoviesById","id","console","log","getMovieCast","cast","getMovieReviews","results","getSearchQuery","searchQuery","query","useSearchParams","searchParams","setSearchParams","get","useState","movies","setMovie","totalMovie","setTotalMovie","loading","setLoading","inputSearch","setInputSearch","useEffect","then","total_results","catch","onSubmit","e","preventDefault","queryNormalized","target","value","toLowerCase","trim","type","name","onChange","currentTarget","placeholder","location","useLocation","map","title","to","state","from"],"sourceRoot":""}